/**
 * üîÑ ProfileContext - Syst√®me central de gestion des profils
 * 
 * Ce fichier g√®re le changement dynamique entre les 4 profils professionnels :
 * - data-engineering : Ing√©nieur Data / IA
 * - pentesting : Expert Cybers√©curit√©  
 * - fullstack : D√©veloppeur Full Stack
 * - project-manager : Chef de Projet PMO
 * 
 * üéØ Utilisation : useProfile() dans n'importe quel composant
 * üîß Pour changer le profil par d√©faut : modifier ligne 29
 */
import React, { createContext, useContext, useState, ReactNode } from 'react';

// üè∑Ô∏è Types de profils disponibles
export type ProfileType = 'data-engineering' | 'pentesting' | 'fullstack' | 'project-manager';

// üìã Interface du contexte (ce que les composants peuvent utiliser)
interface ProfileContextType {
  selectedProfile: ProfileType;                           // Profil actuellement s√©lectionn√©
  setSelectedProfile: (profile: ProfileType) => void;     // Fonction pour changer de profil
  getProfileTitle: (profile: ProfileType) => string;      // Obtenir le titre d'un profil
  getProfileDescription: (profile: ProfileType) => string; // Obtenir la description d'un profil
}

const ProfileContext = createContext<ProfileContextType | undefined>(undefined);

// üè∑Ô∏è Titres des profils (affich√©s dans l'interface)
export const profileTitles = {
  'data-engineering': 'Data Engineering',           // Titre pour le profil Data Engineering
  'pentesting': 'Cybers√©curit√© & Pentesting',      // Titre pour le profil Cybers√©curit√©
  'fullstack': 'Full Stack Developer',             // Titre pour le profil Full Stack
  'project-manager': 'Project Manager PMO'         // Titre pour le profil Project Manager
};

// üìù Descriptions des profils (affich√©es sous le nom dans HeroSection)
export const profileDescriptions = {
  'data-engineering': 'Sp√©cialiste en ing√©nierie des donn√©es, Big Data et architecture de syst√®mes',
  'pentesting': 'Expert en tests de p√©n√©tration et s√©curit√© des syst√®mes d\'information',
  'fullstack': 'D√©veloppeur Full Stack avec expertise React, Laravel et technologies modernes',
  'project-manager': 'Chef de projet avec expertise en gestion agile et management d\'√©quipe'
};

// üéØ Composant Provider - Fournit le contexte √† toute l'application
export const ProfileProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // üîß PROFIL PAR D√âFAUT - Modifiez ici pour changer le profil de d√©marrage
  const [selectedProfile, setSelectedProfile] = useState<ProfileType>('project-manager');

  // üìñ Fonction pour obtenir le titre d'un profil
  const getProfileTitle = (profile: ProfileType): string => {
    return profileTitles[profile];
  };

  // üìñ Fonction pour obtenir la description d'un profil  
  const getProfileDescription = (profile: ProfileType): string => {
    return profileDescriptions[profile];
  };

  // üîó Fournit toutes les fonctions et donn√©es aux composants enfants
  return (
    <ProfileContext.Provider value={{
      selectedProfile,          // Profil actuellement s√©lectionn√©
      setSelectedProfile,       // Fonction pour changer de profil
      getProfileTitle,          // Fonction pour obtenir le titre
      getProfileDescription     // Fonction pour obtenir la description
    }}>
      {children}
    </ProfileContext.Provider>
  );
};

// ü™ù Hook personnalis√© pour utiliser le contexte des profils
// Utilisation : const { selectedProfile, setSelectedProfile } = useProfile();
export const useProfile = () => {
  const context = useContext(ProfileContext);
  
  // ‚ö†Ô∏è V√©rification de s√©curit√© : le hook doit √™tre utilis√© dans un Provider
  if (context === undefined) {
    throw new Error('useProfile must be used within a ProfileProvider');
  }
  
  return context;
};